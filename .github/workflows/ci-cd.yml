name: CI/CD Pipeline with Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  # Job de qualidade de código e testes
  code-quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting with flake8
      run: flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run formatting check with black
      run: black --check src/

    - name: Run tests
      run: pytest src/ --cov=src --cov-report=xml

    - name: Run security audit with bandit
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: Run safety check
      run: safety check --json --output safety-report.json || true

  # Job de análise de vulnerabilidades com Snyk
  snyk-security:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run Snyk to check for license issues
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --license-check

  # Job de análise DAST com OWASP ZAP
  zap-security:
    name: OWASP ZAP Security Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start application
      run: |
        python src/app.py &
        sleep 10

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.8.0
      with:
        target: 'http://localhost:3000'
        cmd_options: '-a'

    - name: Run OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:3000'
        cmd_options: '-a'

    - name: Upload ZAP results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'zap-report.sarif'

  # Job de build e push da imagem Docker
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [snyk-security, zap-security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/dast-scm-sast-app:latest
          ${{ secrets.DOCKER_USERNAME }}/dast-scm-sast-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de deploy (exemplo para ambiente de staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Aqui você pode adicionar comandos específicos para seu ambiente
        # Por exemplo: kubectl apply, docker-compose up, etc.
        echo "Deployment completed successfully!" 