name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: xdebug
    
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Run PHP CS Fixer
      run: composer format
    
    - name: Run PHP CodeSniffer
      run: composer lint
    
    - name: Run PHPStan
      run: composer stan
    
    - name: Run Composer Audit
      run: composer audit
    
    - name: Run tests
      run: composer test

  sonarqube:
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: xdebug
    
    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Run tests with coverage
      run: composer test-coverage
    
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=rrddevops_prj-dast-scm-sast
          -Dsonar.organization=rrddevops
          -Dsonar.sources=app/src
          -Dsonar.tests=app/tests
          -Dsonar.php.coverage.reportPaths=coverage.xml
          -Dsonar.coverage.minimum=80
          -Dsonar.php.coverage.minimum=80
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }}
          -Dsonar.qualitygate.wait=true
          -Dsonar.qualitygate.name=Quality-RRD

  snyk-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
    
    - name: Install Composer
      run: composer self-update
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: List files for debugging
      run: ls -la
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/php@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  zap-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
    
    - name: Install Composer
      run: composer self-update
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Build and start application
      run: |
        docker compose up -d
        sleep 30
    
    - name: Check if application is running
      run: |
        echo "Cleaning up any existing containers..."
        docker stop zap-app || true
        docker rm zap-app || true
        docker system prune -f || true
        echo "Building Docker image..."
        docker build -t dast-scm-sast-app .
        echo "Starting container..."
        docker run -d --name zap-app -p 8081:80 dast-scm-sast-app
        sleep 10
        echo "Container status:"
        docker ps -a
        echo "Container logs:"
        docker logs zap-app || echo "No container logs found"
        echo "Testing application health..."
        curl -v http://localhost:8081/health || echo "Application not ready, waiting..."
        sleep 10
        curl -v http://localhost:8081/health || echo "Application still not ready"
        echo "Final container logs:"
        docker logs zap-app || echo "No container logs found"
    
    - name: Run OWASP ZAP Baseline Scan
      run: |
        # Try different ZAP images
        if docker run --rm -v $(pwd):/zap/wrk/:rw owasp/zap2docker-stable:latest zap-baseline.py -t http://localhost -J zap-report.json -m 5; then
          echo "ZAP scan completed successfully with owasp/zap2docker-stable"
        elif docker run --rm -v $(pwd):/zap/wrk/:rw ghcr.io/zaproxy/zap-baseline:latest zap-baseline.py -t http://localhost -J zap-report.json -m 5; then
          echo "ZAP scan completed successfully with ghcr.io/zaproxy/zap-baseline"
        else
          echo "ZAP scan failed - creating empty report"
          echo '{"scan_results": "ZAP scan failed - no accessible images"}' > zap-report.json
        fi
      continue-on-error: true

    - name: Upload ZAP results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-scan-results
        path: zap-report.json
    
    - name: Stop application
      if: always()
      run: docker compose down

    - name: Cleanup containers
      if: always()
      run: |
        docker stop zap-app || true
        docker rm zap-app || true

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [code-quality, sonarqube, snyk-security, zap-security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t dast-scm-sast-app .
    
    - name: Run container tests
      run: |
        echo "Cleaning up any existing containers..."
        docker stop test-app || true
        docker rm test-app || true
        docker system prune -f || true
        docker run -d --name test-app -p 8080:80 dast-scm-sast-app
        sleep 20
        echo "Container status:"
        docker ps -a
        echo "Testing application health..."
        curl -v http://localhost:8080/health || echo "Health check failed, trying again..."
        sleep 5
        curl -v http://localhost:8080/health || echo "Health check failed again"
        echo "Container logs:"
        docker logs test-app || echo "No container logs found"
        echo "Testing root endpoint:"
        curl -v http://localhost:8080/ || echo "Root endpoint failed"
        docker stop test-app
        docker rm test-app 