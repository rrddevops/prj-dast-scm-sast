name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: xdebug
    
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
    
    - name: Run PHP CS Fixer
      run: composer format
    
    - name: Run PHP CodeSniffer
      run: composer lint
    
    - name: Run PHPStan
      run: composer stan
    
    - name: Run Security Checker
      run: composer security-check
    
    - name: Run tests
      run: composer test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  sonarqube:
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: xdebug
    
    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
    
    - name: Run tests with coverage
      run: composer test-coverage
    
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        scannerHome: ${{ github.workspace }}/.sonar/scanner
        args: >
          -Dsonar.projectKey=rrddevops_prj-dast-scm-sast
          -Dsonar.sources=app/src
          -Dsonar.tests=app/tests
          -Dsonar.php.coverage.reportPaths=coverage.xml
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
          -Dsonar.qualitygate.wait=true
          -Dsonar.qualitygate.name=Quality-RRD

  snyk-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/php@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  zap-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and start application
      run: |
        docker-compose up -d
        sleep 30
    
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.8.0
      with:
        target: 'http://localhost'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Stop application
      if: always()
      run: docker-compose down

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [code-quality, sonarqube, snyk-security, zap-security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t dast-scm-sast-app .
    
    - name: Run container tests
      run: |
        docker run -d --name test-app -p 8080:80 dast-scm-sast-app
        sleep 10
        curl -f http://localhost:8080/health
        docker stop test-app
        docker rm test-app 